{"data":[{"id":1,"text":"BEGINNER\n1.\nHow do you help in picking up the good user stories for the team members?\n\nAs a Scrum Master, one of the responsibilities is to help the team pulling up the backlog for a sprint which is already prioritized and pulling items which are placed on the top (sorted as per the priority). Once, the team is able to identify items that can add value from the pile of requirements, the Scrum Master can help them (Product Owner + Development Team) to convert them into good user stories (if it is not already).\n\nA good user story is one which includes a description and has acceptance criteria defined. It should be a piece which can be delivered in a sprint and entails minimum dependencies. The team should be able to develop and test within the boundaries of the sprint along with providing the estimates. In short, good user stories follow the INVEST principle.\n\n \n\nIndependent - Reduced dependencies\nNegotiable - Describes the functionality, can be negotiated between the Team and PO\nValuable - Provides value to the customer\nEstimable - Too big or too vague = not estimable\nSmall - Can be done in a Sprint by the team\nTestable - Good acceptance criteria\nThe scrum master can help the team in creating good user stories during the backlog refinement or sprint planning so that the team can pick them up for the commitment."},{"id":2,"text":"2.\nA member of the Scrum team does not want to participate in the sprint planning meetings and considers meeting as a waste of time. How do you deal with that kind of attitude?\n\nFor a Scrum Master, it is important to understand the pulse of the team. If there’s a member in your team who takes the meetings as useless, it’s time to know why he/she is adopting such a behavior. The focus should be on the behavior rather than the individual, the Scrum Master should try to talk to the team member individually by asking open-ended questions to find out the reason for not attending the meeting. Certainly, there is a need to understand the cause of this behavior and try to explain the importance of the planning meeting (Scrum ceremonies).\n\nIn Scrum, each individual is important, it is like wheels of a truck, any wheel gets dealigned or malfunctioned, the complete vehicle suffers. Hence, the need to explain the impact of not having his presence in the planning meeting and its impact on the entire team arises. Even the team can start to feel this imbalance. If it is still not resolved, the Scrum Master can set up a meeting with his reporting manager to talk about the concern and look out for ways to help the team member and the team."},{"id":3,"text":"3.\nDo you expect experienced team members to wait until the completion of the next stand-up to ask for help in resolving barriers?\n\nAgile talks about continuous interaction and collaboration between the scrum team. The team members should NOT wait until the next daily scrum to ask for help, in this way, they are introducing delays in the process which will impact the overall sprint goal. If there is an obstacle, it should be raised then and there. In a sprint planning, the team commits the sprint items as per their capacity.\n\nFor example, I have 50 hours of committed work but due to some blocker, I got stuck. Now, if I wait to talk about it the next day or next daily scrum, I am wasting my workable hours which could have been resolved by raising it then and there. The question also specifically calls out for the ‘experienced team members’ which means if the experienced members are resorting to waiting, then it sends the wrong message to other team members. Such behavior within the team also portrays hidden conflicts or team members hesitating to talk. The Scrum Master should help the team in understanding the importance of real-time discussions, and promote healthy dialogue between the scrum team. Even the Scrum Master can come up with some team-building activities to make the team collaborate more efficiently."},{"id":4,"text":"4.\nWill the Scrum team be involved in the product discovery process also, and if so, how?\n\nDuring the early phases of the product development lifecycle, it really helps if the scrum team is made part of the discovery process. You should understand that agile talks about the early involvement of the teams with the stakeholders so that both parties are on the same page in regard to the development. Let’s look at some of the advantages of early involvement:\n\nThe development teams identify the technical challenges in implementation early in the process, hence, can help in reforming the requirements along with the customer.\nThe team along with the product owner also start sharing a common understanding of what is to be built. Sometimes, the teams can help the product owner in identifying the requirements which might have been missed.\nThey share a mutual understanding of what is to be built. It also helps the teams to stay committed and confident, they tend to build an ownership of their work and most importantly it boosts up the morale of the team.\nTo facilitate this, the scrum master can start involving the teams in early discussion of the product where the requirements are still at a high level. The team together with the product owner can build up the product backlog."},{"id":5,"text":"5.\nWhat kind of information would you require from the Product Owner to provide the team with an update on the product and market situation?\n\nThe teams working on a product need to know the integrity of the project and the customer. The product owner should help the team understand ‘Why are we building it?’, ‘What purpose is it going to serve?’.\n\nSuch questions help the team to understand their customer. The product owner has to convey the value that will be added if the product is delivered on time. Conversing the market situation helps teams to understand how the product management works and the criticality for time to market. It also helps to steer the team in a different direction at the end of every Sprint, the product owner can help the team in understanding how the customer is going to consume the product."},{"id":6,"text":"6.\nHow can a Scrum Master contribute to the sprint planning process? How will you make the team really work on the most valuable stories?\n\nSprint planning is a collective effort including a Scrum Master, who facilitates the meeting, a Product Owner, who makes clear the specifics of the product backlog items and their corresponding acceptance criteria, and the complete development team, who outline the work and effort necessary to meet their sprint goal. The scrum master can help the team by:\n\nTime-boxing the activity\nMaking the team stay focused on the intention of the meeting\nFacilitating and Resolving(if required) any deadlocks in the discussion\nCan help them to commit the right amount of work, as per their available capacity.\nTo make sure that the team is invested and asking the right questions.\nTo accomplish this, the scrum master can help the team understand the definition of being ready and the process to create meaningful stories. Also, as discussed earlier in the questionnaire, it is important to get the team to participate in the early discovery process to make them understand the product. The stories should be created as a collaborative effort between the development team and the product owner, this creates a shared understanding of the common goal."},{"id":7,"text":"7.\nWhy aren't user stories estimated in man-hours?\n\nEstimating in man-hours is one of the most prevalent methods for assessing teamwork. While man-hours are easy to understand, there are a few big disadvantages to this method:\n\nFew tasks are hard to estimate precisely, e.g. the legacy work\nIf one team member provides the estimate but another completes the task, the estimate becomes worthless.\nThe time needed to complete a task will vary based on a developer’s level of experience.\nTeams usually misjudge impediments they might face and contemplate only the best-case state.\nThe advantages of estimating user stories in points can be – There is no correlation with the skills and experience of the estimator, story points do not depend on who is doing the story. As the story points are a measurement of relative sizes, and the size of the story cannot be changed by external pressure, the team members can estimate more accurately. Story Points invites collaboration as team behavior becomes prominent over individuals. Using planning poker to estimate story points brings the team together.  It acts as a team building activity as teams share, constructively criticize each other, debate and have fun playing poker cards to come to a consensus on estimates."},{"id":8,"text":"8.\nWho writes user stories?\n\n \n\nAnyone can write user stories. It's the product owner's responsibility to make sure a product backlog of agile user stories exists, but that doesn’t mean that the product owner is the one who writes them. – Mike Cohn\n\nDuring the early product discussions, the team talks about the requirements and capture those in the form of user stories. As product backlog always live, never stays frozen. Hence, if someone feels there’s a missing requirement or something that can add value to the client, they can add it up as a user story in the backlog. There is no rule or guideline stating that only the product owner has to write the stories. People writing the story should understand what exactly it means and how to write it, as there is a set format.\n\nWriting user stories also gives a sense of ownership to the team members and they can connect easily if they are involved in the writing process. User stories are written all through Agile development. Typically a story-writing workshop is held near the start of the agile project. Each person on the team contributes with the objective of crafting a product backlog that completely calls out the functionality to be added over the course of the project."},{"id":9,"text":"9.\nHow much capacity would you consider to refactor, fix important bugs, explore new technologies or ideas?\n\nWhen the sprint is being planned, the team commits the sprint items as per the available capacity. To target the optimum execution, the team should ideally commit between 80% - 90% of the team’s total capacity, anything beyond that percentage will hinder the team’s performance. Bugs, refactoring, and research requires consistent attention in order to escape building-up technical debt.\n\nThough the teams already have items to work on from the product owner, some of the teams set aside 25% of the capacity for this job. We also have a good practice which the teams can follow, 15-10-5 allocation of the scrum team’s capacity, which means, 15% of a team’s capacity to technical debt, 10% of a team’s capacity to defects, and 5% of a team’s capacity to exploratory work.If the team is able to follow these allocations, it will fulfill both the code quality and upkeep necessities of most software applications.\n\nIt is a good practice if followed sprint by sprint, but if for some reason the team is not able to do it in a particular sprint due to high priority delivery, it’s fine."},{"id":10,"text":"10.\nHow do you deal with a Product owner who assigns user stories/tasks to the individual team members?\n\nAs part of a Scrum Master role, one of the responsibilities entail around helping and coaching the Product Owner. It is really critical for the Scrum roles to understand their role and function accordingly. If the product owner is assigning the user stories/tasks, it is the job of a scrum master to make the product owner realize the meaning of self-organization.\n\nIn the Scrum Guide, a partial definition of self-organizing is given as Scrum Teams are self-organizing. Self-organizing teams choose how to accomplish their work, rather than being directed by others outside the team.” Self-governance is one of the utmost motivators there is for people doing creative and problem-solving types of work. Assigning tasks to people is an implicit claim that the product owner knows better than the team, this not only passes on the wrong notion but it also lowers the morale of the team and at the same time defies the scrum values and Agile principle – “Point 5. Give them the environment and support they need, and trust them to get the job done.” And “Point 11. The best architectures, requirements, and designs emerge from self-organizing teams.”\n\nHence, the product owner is assigning work, the Scrum Master should intervene and help the Product Owner in understanding the true sense of working in a Scrum framework and refrain him/her to continue this practice."},{"id":11,"text":"11.\nHow do you make the Stakeholders attend the daily Scrum?\n\nOne of the Agile Principles states “Business people and developers must work together daily throughout the project”. The stakeholders can join the daily scrum meeting but they can be mute spectators till the time scrum is not complete. The Scrum Master should encourage the stakeholders to join the meeting by making them understand that it will be worth their time.\n\nThe goal of the Daily Scrum is to know whether or not they will reach the Sprint Goal. If the stakeholders are joining the daily scrum, then they will get to know the updated picture of product development and can accordingly adjust their expectations. They get to know about the real issues that the team is facing, which helps both the parties. This event gives the opportunity to the development team to directly ask questions with the stakeholders. It not only promotes a platform for discussion but also provides early detection of risk for the stakeholders. But the Scrum Master should make sure that the inclusion of the stakeholders in the daily scrum is not converting the meeting into a status update. Although stakeholder presence is not mandatory, it doesn’t matter if they are there as a listener because it can facilitate the resolution of any impediments."},{"id":12,"text":"12.\nWho can participate in the retrospective meeting- only the Scrum team or the Product owner also?\n\nThe sprint retrospective is an opportunity to inspect and adapt the process as it is a time to reflect on the process. It is needed that the full Scrum team attends. This includes all members of the development team (includes everyone who is designing, building, and testing the product), the Scrum Master, and the product owner. Since the Scrum Guide also states that the Scrum team = product owner + Scrum Master + development team, we can deduce that (officially at least) the product owner is allowed to attend the retrospective. This is the ideal scenario. \n\nHowever, sometimes, the teams might not wish to include the product owner as it might hinder their discussion. If there is a lack of trust between the product owner and the development team, or there is a low level of safety so that speaking candidly isn’t comfortable, perhaps the product owner should not attend until the Scrum Master can help coach those involved towards creating a safer, more trusting environment. Anyone else outside of the immediate scrum team, and particularly managers of team members, should not be invited to participate."},{"id":13,"text":"13.\nWhat retrospective formats have you been using in the past?\n\nThe retrospective format provided by Scrum Guide contains three items:\n\nWhat went well?\nWhat didn’t?\nAction Items to improve\nThis is the usual format that is being used by the Scrum teams. But after a while, it gets monotonous to use the same. And as each team is different, the same formula might not go well with all. There are many different retrospective ideas out in the Agile world, including distinctions and trimmings on the rudimentary questions and creative facilitation techniques.  Scrum Masters should develop a toolkit of retrospective techniques that they can use and adapt to their teams. Let’s look at a few:\n\nSail Boat - The idea is to draw a speedboat on a flip chart and ask the team, “If our team is this speedboat, what anchors are holding us back and keeping us from getting faster/better?” Then the team collects all their ideas on Post-Its, puts them below the boat and draws a line from the boat to the anchor.\nSpeed Car - This is a simple activity for helping the team to identify things that make them move faster, and things that slow them down.\nThere are several other ideas as well, like:\n\nLiked, learned, lacked, longed for (4 L’s)\nStarfish (small, large)\nStop, start, continue\nMad, sad, glad"},{"id":14,"text":"14.\nHow do you recommend following up on action items?\n\nRetrospectives don't finish when they're concluded. In fact, the toughest part has now been initiated: Following-up on your retrospective action plan. In a retrospective, one of the outcomes is the action items which the teams have identified to make their process or work environment much better (retrospective can touch base at different levels). If the action items identified during the last retrospective is not worked upon or gets lost during the course of the sprint, the team will start refraining from coming up with the points as they will not see any closure on the items. Hence, the Scrum Master should present the action items from the last retrospective and discuss the status of progress.\n\nThis gives a sense of satisfaction to the team that they are getting heard and the items are being tracked to closure. There are several ways of following up, for example,\n\n \n\nRunning the activity:\n\n  Open the list of action items (and their respective owners)\n  Update the status for each item on the list.\n Add newly identified items\nEach team can have a different tool for tracking their action items. Some examples: post-it on the team wall, a shared excel document, Trello, etc."},{"id":15,"text":"15.\nMention the cases in which \"Agile\" is working and successful in your organization\n\nAs the saying goes, “One size doesn’t fit all”. Same goes for Agile. All projects and products might or might not fit into the agile arena. In our case, it is working and we are actually reaping the benefits. Let me list out some areas where we see the difference:\n\n \n\nFaster Time to Market - The idea of two-week delivery cycles and quarterly release cadences helped in quicker deliveries.\nFeedback from real customers – Frequent collaboration with the clients helped the teams in building the right product rather than delivering at the end with surprises!\nPrompt risk detection - By delivering early and getting feedback, we reduce the risk of building the wrong product. By focusing on architectural risk in the early sprints, we reduce the risk that we won’t have a solution that can be built in time, at least the team knows it early.\nImproved Quality Stats – Quality is an integral part of the sprint in terms of code coverage, unit tests, peer reviews, etc.\nPredictability – With the teams trying to stabilize the velocity, we could easily predict the capacity for the upcoming release.\nEvery Agile journey is different, hence their experience. Thus, it is important to identify the success factors to promote excellence."},{"id":16,"text":"16.\nThe Product Owner of the team turns stakeholder’s requirement documents into tickets and asks to estimate them. Are you fine with that process?\n\nAs a Scrum Master, I will not accept this process as it is its sugar coating Waterfall in the name of Agile. Just converting the requirements into tickets will not suffice for the entry criteria of the user stories. The requirements should be finely broken down into finer pieces so that it can be consumed in sprint time. The conversion of stakeholder requirement into tickets should also follow the best practices in the industry like INVEST, 3Cs, etc. to help teams gain confidence into what is to be built.The focus should always be on delivering value to the customers, which requires keeping a health prioritized backlog. The organization adopting Agile use tools like Rally, Version 1, etc. to manage the product backlog and sprint backlog. Hence the requirements should be entered in the tools for the teams to pick.\n\nMoreover, the scrum team should be involved early in the product discovery process so that all the parties involved have a shared understanding of what is to be built. This also helps in curating the requirements which are feasible and have pre-identified risks and challenges. Finally, the Scrum Master should help the teams to be agile and not just allow anti-patterns to grow."},{"id":17,"text":"17.\nHow do you choose the most valuable user story?\n\n \n\nThe Product Owner is invested to conclude the value that the user story will deliver, enabling him or her to set the backlog as per the highest priority. When a user story is created, it carries some value (we have also learned about it in the INVEST model where V stands for Value). When the sprint is being planned, the team pulls up the highest priority item from the pile for commitment. If the team members are picking up tasks as per their comfort, the scrum master has to come in picture and coach the team. Even the product owner might pick up stories which are not adding value to the customers.\n\nHence, the story time or the sprint planning meeting should be addressed in the true sense, the scrum master should facilitate these meetings in a way that they stick to the intent of the meeting and come out with the valid outcomes. Both the team and the product owner has to focus on value delivery rather than ease of work. If the teams are involved early during the product discussion, these types of challenges can be minimized."},{"id":18,"text":"18.\nWhat will be the structure of a good user story?\n\nA user story represents a small piece of business value that a team can deliver in a sprint. Though traditional requirements (like use cases) try to be as detailed as possible, a user story is defined incrementally in three stages:\n\n \n\nWho are we building it for, who the user is? — As a <type of user>\nWhat are we building, what is the intention? — I want <some goal or objective >\nWhy are we building it, what value it brings for the user.? — So that <benefit, value>\nWell-formed stories will meet the criteria of Bill Wake's INVEST acronym:\n\nIndependent - Can the story stand-alone by itself?\nNegotiable - Avoid too much detail; keep them flexible so the team can adjust how much of the story to implement.\nValuable - Users or customers get some value from the story.\nEstimable - The team must be able to use them for planning.\nSmall - Large stories are harder to estimate and plan. By the time of iteration planning, the story should be able to be designed, coded, and tested within the iteration.\nTestable - Can this story be tested and verified?"},{"id":19,"text":"19.\nDuring the Daily Scrum, what exactly is the Scrum Master's role?\n\nThe Scrum Master arranges the Scrum meeting for the Development team. The Development team is the main player in the meeting.  But, the Scrum Master guides the Development Team to keep the Daily Scrum within the 15-minute time-box. The Scrum Master enforces the rule that only the Development Team members participate in the Daily Scrum."},{"id":20,"text":"20.\nWhat is the role of a Scrum Master in sprint retrospective?\n\nPeer team member. The Sprint Retrospective provides an opportunity to inspect and adapt the progress for improvements. The Scrum Master plays the role of a facilitator for his/her team. In the Scrum framework, the teams are self-organized and open to making changes very quickly wherever needed."},{"id":21,"text":"21.\nWhat is the main reason for the Scrum Master to be at the Daily Scrum?\n\nA Scrum Master does not have to be there; he or she only has to ensure the Development Team has a Daily Scrum. The Scrum Master enforces the rule that only Development Team members participate in the Daily Scrum. Although the Scrum Master or Product Owner can attend this meeting to facilitate the Daily Scrum, this is certainly not required by Scrum. The Development Team members synchronize their work, monitor their progress toward the Sprint Goal and if required they adapt the Sprint Backlog and the plan for the next 24 hours during the Daily Scrum."},{"id":22,"text":"22.\nWhat are the two primary ways a Scrum Master keeps a Development Team working at its highest level of productivity?\n\nBy facilitating Development Team decisions and by removing impediments that hinder the Development Team. A Scrum Master is a servant-leader for the Development Team. Facilitation and removing impediments serves a team in achieving the best productivity possible. The Scrum Master within the Scrum Team facilitates the development of working software and help the development team in delivering the Product Increment. The Scrum Master does everything possible to help the development team to work at their highest level."},{"id":23,"text":"23.\nWhat are the roles of a Scrum Master related to the Daily Scrum?\n\nThe role of the Scrum Master majorly includes the facilitation. The SM facilitates the Daily Scrum for the development team to discuss the daily tasks and to increase team collaboration. The Scrum Master also ensures that the team is strictly adhering to the Daily Scrum meeting rule that the meeting should be time-boxed to 15 minutes only."},{"id":24,"text":"24.\nAs a Scrum Master, when should I not act as a facilitator?\n\nAlthough a Scrum Master is said to facilitate the team to produce the best results, workshop facilitation is sometimes a different matter.\n\nA workshop facilitator must be independent of the topics being discussed and should not contribute facts or opinions to the conversation.\n\nIn most general product development workshops, if he/she has the skills, the Scrum Master may facilitate the workshop.\n\nHowever, if the workshop is to discuss something like modifying the Scrum process, the Scrum Master does have important things to contribute and should not facilitate that workshop."},{"id":25,"text":"25.\nAs a facilitator, how do I prepare for a workshop?\n\nThe following facilitator activities are required when preparing for a workshop:\n\nIdentify the Workshop Owner – Each workshop must have an owner; the person who needs the group decisions.  For example, for a requirements gathering workshop, the owner would most likely be the Product Owner.\nEstablish the Workshop Objectives – You can treat a workshop like a mini product development; the Vision is the overall reason for the workshop; the Objectives are the first decomposition of the Vision.  For example:\nThe Vision: To decide which products to promote\nThe Objectives:\nDecide the products in scope\nEvaluate the relative value of the products\nEstablish a prioritized list of products to promote\nEstablish the Participants – The Workshop Owner should give a list of required workshop participants and/or direct the facilitator to a person who can provide that information\nEstablish by when the workshop must be run – All decisions are time sensitive.  It may be that some proposed participants may not be available at specific times.  The date and time of the workshop must be chosen to be within the cut-off date and to maximize the number of proposed participants\nEstablish the type of workshop to be run – Workshops can be run as participants sitting around a horseshoe-shaped table to an ‘Open Space’ where participants are free to roam a room with separate areas for discussion on specific topics.\nArrange the workshop venue – A workshop venue must be chosen and booked to suit the number of proposed participants and the workshop type\nEstablish any pre-workshop participant reading materials – It may be useful for proposed participants to have some information pertinent to the workshop before the workshop begins.  Although you, as a facilitator, will give them access to these materials, do not expect every participant to have read them!\nInvite the participants to the workshop – Send invitations to the proposed participants with the following details:\nThe reason for the workshop\nThe Workshop Owner\nThe workshop Objectives\nThe date, time and venue for the workshop\nThe proposed participants; this may be the distribution list on the email; it gives proposed participants to suggest other participants and/or to suggest replacements for themselves\nArrange for refreshments to be available\nPrepare the workshop space\nPoint of Process\n \n\nIf a participant feels that the group discussion is not following the correct procedure or a discussion has gotten off topic, they may make this hand gesture and say out loud “Point of Process.” \n\nThe Stack Keeper allows them to speak before the next person at the top of the stack. They must then say how they think the discussion has gotten off topic or is not following procedure. \n\nExample 1: “I’m not sure why we’re talking about shifts when the agenda says we’re supposed to be talking about salaries.”\nExample 2: “There’s a proposal on the table, and I think we should resolve that before we move on to anything else.”"},{"id":26,"text":"ADVANCED Questions\n1.\nA user story is lacking the final designs, and the design team is promising to deliver on Day 2. The Product Owner also agrees with that and tries to push the user story to the sprint backlog. What will be your step?\n\nThe entry criteria for any story in a sprint relies on Definition of Ready which involves creating clear criteria that a user story must meet before being committed into an upcoming iteration. In our scenario, the user story lacks final designs which clearly indicates that it is NOT ready to be picked up for the commitment. Also, in this scenario, the product owner agrees and pushes the team to commit. As per Agile, it is a wrong practice, BUT, it also depends on the team’s circumstances. If the past experience says that the design team has been delivering as promised on the timelines, or if the story is of high value to the client, in such cases the team can go ahead with the exception and commit the story.\n\nHowever, this should not be made a regular practice as it would be a compromise with the principles and with the core essence of Scrum. The Scrum Master should look for such anti-patterns and help the team understand the importance of Definition of Ready.\n\nIt all depends on the team’s situation to go ahead with the exception or reject the same. Accepting stories which do not meet the ready definition increases the risk of completion and even impacts the teams’ efficiency."},{"id":27,"text":"2.\nWould you recommend stand-ups for all teams regardless of their size and experience level?\n\nThe daily stand-up meeting helps the team to echo on the development of the team's commitment towards the sprint goal. Hence, all agile teams should meet on a regular interval so that everyone is talking the same language. The way of executing the standup can differ according to the size and experience level. Lets’ take up some scenarios:\n\n \n\nSmall & Experienced – If the size is small with experienced members, the team can meet up over a quick break, they can even opt for a casual meeting.\nSmall & Less Experienced – Even though the size is small, the Scrum Master should prefer going through a formal standup as the team needs to understand the progress, they might need help with technicalities or business functionality, they also need to realize the values, principles and the discipline in the process.\nLarge Teams – Opting a casual approach might prove difficult with large teams, as for large teams formal meeting is required to provide guidance and clarity.\nDistributed Teams – Your team is considered co-located when the developers and the primary stakeholders are all situated in the same workroom. Otherwise, your team is either geographically distributed or dispersed in some manner. In the case of distributed teams, since there is a constraint of location, the teams can use the ‘dial-in’ and conduct the daily scrum in an organized manner."},{"id":28,"text":"3.\nHow do you approach standups with distributed teams?\n\n \n\nThe daily standup meeting in agile remains the same, that is, 15 minutes, where the team meets, talks about the three questions. Any further discussion will be a part of the sidebar, that’s it! “For teams that share work between time zones, stand-up is a great time to pass the baton as the team which is coming online can pick up right where the other team had left off. And holding stand-up via video conference makes it easy to ask questions and get up to speed so everyone is off and running as soon as the meeting is done.” - Atlassian\n\nThis applies to all the Agile/Scrum teams whether they are co-located or distributed, the scrum events remain the same. With distributed teams, there is just a small difference – they use video conferencing for sprint board sharing (if no online tool is being used). But if the teams are using tools like Version 1 or Rally or any other tool, they can simply use a dial-in number to connect with each other. There are multiple platforms like Skype which can be used to bring together the teams. Here, the Scrum Master can come up with creative ways of working with distributed teams, like - coordinating across time zones, building a relationship when everybody is not in the same office, working together among different development cultures."},{"id":29,"text":"4.\nCan you draw a draft of an offline Kanban board for a Scrum team right now?\n\nThe meaning of ‘Kanban’ is a visual board, where ‘kan’ means visual and ‘ban’ means board. In Scrum, the sprint board works in Kanban manner. Let me pull up a draft board:\n\nIt is comprised of vertical swimlanes where each lane stands for a phase in the sprint execution. Horizontally, it contains the sprint items. Each vertical swimlane can be customized as per the product or project need. Usually, it has – Backlog, To Do, In-Progress, Done and Accepted as the header. Once the team has started working on an item, it will start flowing from one phase to another. If the item is blocked due to an impediment, then it will sit in that vertical till the time is resolved.\n\nThe scrum master has to help the team in a smooth flow of sprint items through continuous collaboration, discussion, and focused approach.\n\n \n\nThe additional information to cover-up the Kanban can be:\n\nSprint timeline – Start date and the end date\nSprint Cadence - Pulse or rhythmical flow of scrum events\nDefinition of Ready – Entry criteria for the user stories\nDefinition of Done – Exit criteria for the user stories\nYou can even mention the metrics around the Kanban board. The Kanban board serves as an information radiator for the team and outside the team (stakeholders + management)."},{"id":30,"text":"5.\nDo you think it is necessary to check the team health in a retrospective? If so, how would you do it?\n\nAs mentioned in the earlier question, sprint retrospective is an opportunity to inspect and adapt the process. Thus, checking the team’s health at this meeting can be a good opportunity. The team should together this time look at the areas of improvement and talk about the overall health.\n\nThe Scrum Master can facilitate the health check through various tools, simple can be using a scale from 1-5 where 1 stands for awful and 5 for extraordinary. They can even use the TeamHealth Retrospective which is a powerful deep-dive strategic retrospective tool that focuses on the top areas that affect team performance and health.\n\nTo check the team health, the team can come up with the parameters to check on the health – Culture, Technical Practices, Quality, Backlog Visibility, and Team Collaboration. The team can have its own customized parameters and against those parameters, there will be some points to validate that parameter. The team, after discussion, gives a point on the scale of 1-10 to that parameter. The same goes for all the parameters. Once this activity is done, the tool will automatically generate a spider chart showing the areas that need improvement. The Scrum Master can coach and suggest the team on how to reach the 5 in the spider!"},{"id":31,"text":"6.\nHow can you prevent extreme weariness at retrospectives?\n\nWhen the Scrum teams follow the same pattern of the retrospective sprint by sprint, it does induce weariness among the teams. The Scrum Master needs to be creative enough to try out different patterns, sometimes changing the location also works. Anything that happens regularly with the same format tends to create an uninteresting environment in the meetings.\n\nAs discussed in the earlier question, the scrum master can use different types of retrospectives to create a fun introspecting atmosphere. Some of the teams opt to go out for lunch and have a discussion over there, it not only helps to collaborate but also provides a safe environment to discuss. Or you can use a different room. While creating a conducive environment to reduce the boredom, the Scrum Master has to make sure that the essence of a retrospective is not lost. The intent should be the same even when you are using different patterns."},{"id":32,"text":"7.\nHow will you make the team deliver action items on time?\n\nTo make the retrospective effective, the team should identify the action items. This gives a platform to the team to start a conversation, but only identifying will not serve the purpose. The action items should be targeted for closure and scrum master should take steps in realizing this goal. For every action item, there should be an owner, teams should refrain from assigning multiple owners to a single item as the idea of ownership dilutes. The scrum master should manage the repository of action items on a tool or an excel which is accessible to all the team members. Having a backlog of action items also helps as then the team can actually prioritize.\n\nIn the retrospective meeting, the team should go through the items from the last retrospective and talk about its status, in that way everyone can keep track of where they are and what more is required to achieve the goal of closure. Few organizations use retrospective tracker where the action items are categorized into – priority, ownership, status, description, identified on, type. Working on the actions items gives the team a boost that they are moving forward towards improvement and also it enhances the sense of ownership."},{"id":33,"text":"8.\nOne of the Agile Manifesto values says \"People over processes\". Isn't the Scrum master role which enforces \"the process\" a contradiction?\n\nThough Scrum mentions the Scrum Master role as the person enforcing the process, it is important to understand what exactly does the enforcement mean and what its boundaries are.\n\nEnforcement does NOT mean forcing the team to follow the process, but it implies putting in practice the core entities of the Scrum to help the teams be successful. The Scrum Master is the facilitator helping the teams reach their goal. During facilitation, the Scrum Master will use Scrum practices and would encourage the team to follow the scrum values.\n\nAgain, it is important to mark that we are talking about encouragement and not forcing. It is not a role similar to the project manager but this role will help the teams to bring their blockers to closure, it will be a collaborative effort and not a directive one. From time to time, the scrum master will try to show the benefits of adopting the processes and help the team acquire an understanding on the scrum processes which is like showing the right path but it is up to the team if they want to walk through it. The scrum master will also be acting as a coach for the team to help with outshine in the agile journey and be successful."},{"id":34,"text":"9.\nAre there any typical metrics involved that you can track? And if so, which metrics would you track and for what purpose?\n\nEvery organization opting for Agile creates a model to assess the maturity at different levels. It helps them stay focused and goal-oriented. It is an assessment of an organization’s suitability for agile practices, providing an idea of the necessary steps for an organization that decided to become a learning organization. The metric is based on the initial collection of data as to what the current situation is and what is the desired level. Hence, the parameters involving the assessment can be different for different organizations.\n\nIn our case, the focus was on:\n\nAbility to accept change\nTeam communication\nTeam Location\nDelivery Regularity\nPlanning Methodology\nTesting\nBusiness Value Focus\nTechnical Excellence\n \n\nEach of the pointers mentioned had sub-details to analyze and assign an appropriate number. The assessment was done on a regular interval to check if the teams are reaching the milestones set in agreement with the management (agile focused). It also helps in identifying areas which need immediate attention. The team can swarm together to improve that item."},{"id":35,"text":"10.\nYour team's performance is constantly not meeting commitments and its velocity is very unstable. Why does this happen? And how would you solve those issues?\n\nThe team’s performance is not just related to a single event or a reason but there can be different scenarios that might be building up that situation. A good scrum master has to identify those patterns and look out for ways to minimize it. Let’s look at a few of the situations that might lead up to lowering the team’s performance:\n\n \n\nPlanned Leaves or Holidays – The sprint commitment is directly proportional to the total available capacity of the team. If there are leaves or holidays, the commitment will go less and hence lowering the velocity.\nLegacy product – In case the code has been written long back with no documentation, the new members struggle to figure out things.\nNew hire – Onboarding a new associate will impact the sprint commitments as the member is new and needs time to be brought to speed.\nResignation – If the team members are leaving, it might take some time to fill up the gap.\nExperience – If the team comprises of experienced team members along with new one, then the level of seniority might hinder the team formation.\nThere can be many reasons, but the scrum master should keep their eyes open for any such patterns and try to help the teams get back to track through coaching and adoption of best practices."},{"id":36,"text":"11.\nWhat should a \"Definition of Ready\" consist of?\n\n \n\nThe product backlog contains a list of items to be worked upon by the team but it is important to check if the items are in a ready state to be picked up in a sprint. The Team must be able to determine what needs to be done and the amount of work required to complete the User Story or PBI. The Definition of Ready can differ from product to product or from team to team. It is a working agreement between the team and the Product Owner on what readiness means. Let’s look at some of the parameters that can go in defining the Ready state:\n\nDefinition of Ready for a User Story\n\nThe PBI is in “Approved”, or equivalent, state for the team to pick it up for development\nUser Story dependencies identified\nAcceptance criteria exist and are understood by the team\nAcceptance criteria have sufficient details on the features to be developed and tested by the team\nPerformance criteria have been provided, where appropriate, and are understood by the team\nThe PBI has been written in the\nActor->Action->Outcome format\nUX wireframes exist, where appropriate, and are understood by the team\nPerformance criteria identified, where appropriate\nTeam has a good idea of what it will mean to Demo the User Story"},{"id":37,"text":"12.\nThe Product Owner of the Scrum team tends to add all kinds of ideas to the backlog to continue working at the next stage. Meanwhile, this has increased to over 200 tickets at various stages. What is your decision on that? Can the Scrum team work on 200 tickets?\n\nOne of the advantages of working in Agile is the clear backlog visibility at least for three sprints. If the product owner is adding up the items in the backlog, then it might be he or she is getting ideas and they are just parking aside on the backlog. That doesn’t mean that the team has to work on all the ideas. A product backlog can have a list of items to be accomplished, but the team will only focus on the high priority items which can add value to the client.\n\nAlso, here, the role of a scrum master can come handy, this role can help the product owner understand how to arrange the backlog, and how to create items that can be consumed by the teams. The scrum master can explain different prioritization techniques that can be used for keeping the backlog sorted. But the scrum team is not expected to pull up everything that is on the backlog. One of the roles of the Scrum Master is to coach the product owner on how they can best converse their intent to the Development Team. There are many techniques to accomplish this, such as product visioning, product road mapping or release planning."},{"id":38,"text":"13.\nOn what metrics would you base the assessment of the value of a user story and which are the metrics that are not acceptable?\n\nThe focus of the team should be on delivering value to the customer. It is not only the responsibility of the team but also it is important from the organization perspective. Each story is built on the concept of priority and value added to the customer. If the team is able to bring value through frequent deliveries and product increment, then the client will be happy. The client satisfaction can also be one of the metrics to measure, if the client is able to realize value, it will be worth their money.\n\nAnother one can be, focus on minimizing the technical debt, once the product development starts, it is important to do the maintenance work from time to time to ensure the performance of the product, no one wants a dead code in the system. Bugs, refactoring, and research also requires regular attention to avoid building-up technical debt. Any metrics which cannot relate to the value delivered should be avoided in such scenarios as they portray a different picture, e.g, though velocity variance is a good metric to track if I relate to value delivery it won’t work well.\n\nHence, the focus should always be on value delivery, and it should be the prime goal."},{"id":39,"text":"14.\nA Scrum Master has a list of open impediments which is growing without proper resolutions. The Scrum Master consults with the Development Team on the problem. Is it right?\n\nYes. The Scrum Master is one of the roles from the Scrum team which is responsible for ensuring the team is adhering to the Agile values and principles. The Scrum Master is the team facilitator. Along with that, the SM is responsible for clearing the obstacles, protecting the team from external interruptions and distractions that hinder the project goal."},{"id":40,"text":"15.\nEven though the Scrum Team is following the Scrum framework entirely and their project is going well, the organization as a whole does not have a good understanding of Scrum, which makes some troubles for the Scrum Team. Who should try to fix it?\n\nThe Scrum Master. It’s the responsibility of the Scrum Master to create a supporting understanding of Scrum in the whole organization. The Scrum Master is responsible for ensuring the team is adhering to the Agile values and principles. The Scrum Master is the team facilitator. Along with that, the SM is responsible for clearing the obstacles, protecting the team from external interruptions and distractions that hinder the project goal."},{"id":41,"text":"16.\nIs  Scrum Master a \"management\" position?\n\nYes. The Scrum Master position is the management level position, but it is not a manager position. Scrum Master does not manage the Scrum Team or even the Development Team but manages the Scrum process. If the Scrum Master is not at the management position, he or she may not have the influence to remove the impediments."},{"id":42,"text":"17.\nHow does a Scrum Master increase the productivity of the Development Team?\n\nBy facilitating their decisions and removing impediments. Scrum Master does not manage the Development Team. It is the responsibility of the Development Team to manage its own efforts. However, the Scrum Master helps them by facilitating their decisions and removing impediments and protecting them from the external distractions."},{"id":43,"text":"18.\nOne of the Scrum Teams chooses to have a Development Team member also playing the role of Scrum Master. Is this the right practice?\n\nIn some projects, a development team member acts as a scrum master as there is no rule set up officially that a scrum master cannot be a developer. Definitely, it is hard to perform 2 roles at one time, however, it is definitely possible. A development team member playing the scrum master role depends on the team, team members skills and internal choice of manager or team. Ultimately, everything is possible in agile-scrum projects."},{"id":44,"text":"19.\nA Scrum Team is in the process of defining Product Backlog items. The Scrum Master notices that the team is not using user Story format to capture the backlog items. What should be the Scrum Master’s course of action?\n\nThe Scrum Master should let the team decide the format of Product Backlog items. The product owner brings forward the main objective that should be achieved in the sprint and the PBIs that would help to attain these objectives. The development team selects the PBIs that will help to achieve the sprint goal based on the product owner input and creates the plan for delivering the PBIs. The scrum master ensures that the scrum rules are followed appropriately. There is no need for a scrum master to conduct events, but instead to facilitate as required."},{"id":45,"text":"20.\nYou are working as a Scrum Master in a team. Your organization plans to conduct a roadshow. You are asked to contribute to some of the related events. What should you do?\n\nYou should gladly volunteer because being a Scrum Master in an organization also involves responsibilities to coach the organization."},{"id":46,"text":"21.\nIs the Product Owner the only one to communicate with Stakeholders all the time?\n\nNo. The entire team collaborates with stakeholders during the product review. Scrum Master can also work with stakeholders to help them understand Scrum. Stakeholders communicate with Product owner with respect to Product Planning, its progress, and Product backlog changes. Good communication helps project stakeholders engaged and informed and keeps the scrum team focused on finishing the accepted work for the sprint."},{"id":47,"text":"22.\nA Development Team identifies a technical issue that requires them to work together. Who needs to facilitate this?\n\nThe development team needs to facilitate. The development team is responsible for performing development work and meeting the Sprint Goal. If they have any issues within their influence to resolve, they are responsible to solve it. Scrum Master is responsible for impediments that are outside the Development Team’s influence."},{"id":48,"text":"23.\nDoes conducting the Daily Scrum at the same time and at the same place every day make it easier for Scrum Master and Product Owner to participate?\n\nNot necessarily. It is preferable to conduct it at the same time and the same place to reduce the complexity of meeting overheads. Unless the Product Owner and Scrum Master are also part of the Development team it is not required for Daily Scrum. Daily Scrum is for the Development Team. The Daily Scrum is not planned as a status report or management reporting mechanism. Performing Daily Scrum highlights liability and commitment in the development team."},{"id":49,"text":"24.\nAs a Scrum Master, what you need to do when you find the organization or an individual is breaking one or more of the Agile Principles?\n\nThe following are misinterpretations or breaking of the Agile Principles and suggested ways to fix the problem(s):\n\nOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\nSome people focus on the ‘happy customer’ aspect of this Principle and will do whatever the customer asks.  This may make the customer happy in the short-term but the real value to the customer is delivering valuable increments of the product as early and continuously as possible.\nThe fix – ensure the development team and customer agree on a regular Sprint and Release Schedule and ensure that they keep to it.\nWelcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\nSome Agile teams understand the word \"welcome\" here as permission to forget about any requirements management at all. What is the easiest way to welcome change? Obviously, just get rid of any required documents!  However, this Principle does not mean abandoning any requirements management process.\nThe fix – Ensure that the Product Owner maintains an ordered Product Backlog and that all change requests are handled by the Product Owner; the PO will decide if the change is justified and if it is whether the request is important enough to interrupt the current Sprint or whether it is placed on the Product Backlog in the appropriate business value position.\nDeliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale\nThere may be some Development Team members that think this Principle applies at the Development Team level but does not apply to themselves individually.  It is difficult to imagine how these people think that the team will deliver without their individual contribution!\nThe fix – Ensure that all Development Team members attend Release and Sprint Planning workshops and contribute effectively.  Additionally, ensure that all Development Team members attend the daily Scrum; it will soon become obvious if an individual’s progress on their chosen activities is less than ‘optimal’.\nThe Scrum Master should engage any ‘miscreant’ Development Team member in individual mentoring to discover what the underlying problem is that is causing the problem and help the person to improve.\nBusiness people and developers must work together daily throughout the project\nWorking together doesn't mean working without clearly defined rules and processes. Some teams interpret this Principle as the legalization of chaos; they think that, since we work together, we do not need to define roles, we should not document requirements and we should not care about responsibilities.\nThis is clearly nonsense; Agile requires that all the responsibilities necessary for successful product development must be identified and an individual or group of individuals take on one or more of those responsibilities.\nThe fix – As a Scrum Master, for new Scrum Teams, ensure that a workshop is held with the Scrum Team and key stakeholders to define all the necessary responsibilities and ensure that all the responsibilities have been accepted by one or more people appropriately.\nDo not allow individuals to ‘quote’ their named role job specification in an attempt to avoid responsibilities; if they have the knowledge and capacity to fulfill a responsibility outside of their job specification, then they could accept that responsibility.\nBuild projects around motivated individuals. Give them the environment and support they need and trust them to get the job done\nIt may be difficult for some ‘managers’ and ‘supervisors’ in the early stages of an Agile transition to ‘let go of the reins’; they are used to assigning low-level tasks to individuals and monitoring their work closely; their implies a lack of trust on their part in the ability of individuals and teams.  Agile teams should be self-organising and self-managing.\nThe fix – As a Scrum Master, you must closely monitor the activities of ‘managers’ and ‘supervisors’ and if these activities are disruptive to the Development Team, then you must mentor the individual ‘miscreants’ to explain the Agile philosophy and Principles to them how their ‘interruptions’ are causing delays in development progress.\nThe most efficient and effective method of conveying information to and within a development team is a face-to-face conversation\nFace to face does not necessarily mean that all people contributing to the conversation being in the same room; some people believe it does and use this to avoid Agile when all people cannot be in the same room.\nHowever, technology has moved on since the Agile Principles were written; today, communicating by video-conference and desktop sharing facilities is commonplace.\nVideo-conferencing is preferred over teleconferencing because with the latter, you lose the ability to observe ‘body-language’, an important part of any communication.\nThe fix – As a Scrum Master, if communication with remote people is needed, whether within the Development Team or with stakeholders, encourage the use of video-conferencing at a time that is suitable to all the people in different time-zones.\nWorking software is the primary measure of progress\nThis Principle states that working software is the primary measure of progress; it is not the only metric we can use to analyze product development.\nThe Development Team measure and use their Velocity to help them plan; the business (product Owner) measures the benefit achieved from released increments.\nThe fix – As a Scrum Master, you need to ensure that the Development Team and Product Owner agree the metrics that are to be used.  You must help to ensure that the metrics are measurable, relevant and are of value.\nYou need to make sure that collecting any metric may have the effect of changing peoples’ behaviour; for example, if the number of lines of code per day was to be measured, developers may use verbose coding practices thus reducing progress and technical quality.\nThe focus of any metric chosen must be its contribution toward the overall business value accruable from the product increments being delivered.\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\nThis Principle focuses on the wellbeing of all involved with product development but it must not be forgotten that the prime focus of product development is to deliver value to the ‘customer’; the Development Team cannot just keep working at a comfortable pace if they are not meeting the ‘value deadlines’ set by the ‘customer.\nThe fix – As the Scrum Master, you need to ensure that the Development team estimate the Product Backlog Items and agree with the Product Owner what is possible in a fixed time and what is included in the Product Backlog MVP; ensure that the Product Owner is aware of his/her responsibility to measure the rate of delivery of business benefit.\nContinuous attention to technical excellence and good design enhances agility\nThis Principle means that there must be technical ‘rules’ in place that must be checked for in each developed requirement source code before it can be considered “Done” and allowed to be reviewed by stakeholders.  If these rules are not in place or they are not checked for, then the quality level will decrease resulting in an unhappy ‘customer’ and reduced progress as required rework is done.\nThe fix – As the Scrum Master, encourage the Development Team, Product Owner and technical advisors to agree what the technical and design quality criteria are and how they will be checked for; the agreement forms the “Definition of Done” (DoD) that each requirement and increment will be checked against before it is reviewed by stakeholders.\nSimplicity--the art of maximizing the amount of work not done--is essential\nTo some developers, it is tempting to ‘future proof’ their work, adding functionality that may be or known to be needed later.\nThis results in slowed progress and potential work when the perceived later need does not transpire.\nThe fix – Ensure that there are some DoD criteria that check for future-proofing in the required source code.  This will encourage developers to:\n‘Only do today what is essential to do today’\nThe best architectures, requirements, and designs emerge from self-organizing teams\nWe say that the Development Team should be self-organising for the work that they do during Sprints but they are subject to constraints such as:\nThe overall technical architecture to work within; set by corporate tech architects.  The Development Team can ask for amendments to the technical architecture but they have no control over it.\nThe requirements – Requirements are the Product Owner’s responsibility; the Development Team can suggest changes to the Product Backlog but they only have control of how the agreed requirements are implanted.\nThe design – There may be corporate design standards in place; again, the Development Team can suggest design changes but only have control over how the agreed designs are implemented.\nThis Principle not just about the Development Team; the self-organizing concept applies to the wider group of business and technical stakeholders that must work closely together so that the product can provide the best business value.\nThe fix – As the Scrum Master, you must analyze any constraints that the Development Team have to work with and ensure that adequate processes are in place whereby requested changes are speedily analyzed and accepted or not.\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly\nThis Principle is embodied in the Scrum ‘Inspect and Adapt’ Pillar and is enacted through the Sprint Retrospective event.\nThe Sprint Retrospective is not just about discussing what is wrong but also what is good and maybe the team should do more of.\nAt the start of an Agile Transformation, the team may ‘find’ many things that are ‘wrong’; the long list may be seen by some to be time wasting and others as demotivating; ‘how are we going to address all these problems?’.\nBecause of this, many teams give up on the Retrospective!\nThe fix – The discovery of good and bad things during a Retrospective should be time-boxed to maybe 15 minutes when the major points will be discovered.  There are many Retrospective Games that can be played by the team members to make the discovery more enjoyable.\nAn important part of the Retrospective is that the team prioritize the issues and plan how to resolve the top 1 or 2 issues in the coming Sprint.\nProgress on issue resolution can be done during the daily Sprint and the overall success of the improvement plans checked at the start of the next Sprint retrospective."},{"id":50,"text":"25.\nWhat sort of person do you need to be a great Scrum Master?\n\nThe following is a quite comprehensive list of attitudes and skills that contribute to being a great Scrum Master; of course you don’t have to meet this entire list to be a great Scrum Master; consider it as some inspiration on areas you might want to research. \n\nInvolves the team with setting up the process. A great Scrum Master ensures the entire team supports the implemented Scrum process.\nUnderstands team development. A great Scrum Master is aware of the different phases a team will go through when working as a team. He/she understands Tuckman’s different stages of team development: forming, storming, norming, performing and adjourning.\nUnderstands principles are more important than practices. Without a solid, supported understanding of the agile principles, every implemented practice is basically useless.\nRecognizes and acts on team conflict. A great Scrum Master has read the book ‘The 5 Dysfunctions of a Team’ by Patrick Lencioni. He/she therefore recognises team conflict in an early stage, can apply different activities to resolve it, and even better, he/she knows how to prevent conflict.\nDares to be disruptive. A great Scrum Master understands some changes will only occur by being disruptive. He/she knows when it’s necessary and is capable to be disruptive enough to enforce a change, but without causing irreparable damage.\nIs both dispensable and wanted. A great Scrum Master has supported the growth of teams in such a manner they don’t need him/her anymore on daily basis. But due to his/her proven contribution he/she will get asked for advice frequently.\nLet the team fail (occasionally). A great Scrum Master knows when to prevent the team from failing but also understands when he/she should not prevent it. The lessons learned after a mistake might be more valuable than some good advice beforehand.\nEncourages ownership. A great Scrum Master encourages and coaches the team to take ownership of their process, task wall and environment.\nHas read… A great Scrum Master has read all the stuff produced by e.g. Geoff Watts, Lyssa Adkins, Tobias Mayer, Henrik Kniberg and Gunther Verheyen. \nHas studied… A great Scrum Master has studied the Trello board that Growing Agile has published. The Shu-Ha-Ri levels offer a very useful structure to a knowledge base for every Scrum Master.\nIs RE-TRAINED. A great Scrum Master recognizes himself in the acronym made up by Geoff Watts, RE-TRAINED: \nResourceful: is creative in removing impediments\nEnabling: is passionate about helping others\nTactful: is diplomacy personified\nRespected: has a reputation for integrity\nAlternative: is prepared to promote a counter-culture\nInspiring: generates enthusiasm and energy in others\nNurturing: enjoys helping teams and individuals develop and grow\nEmpathic: is sensitive to those around them\nDisruptive: breaks the status quo, help create a new way of working\nHas faith in self-organization. A great Scrum Master understands the power of a self-organizing team.  Attributes of self-organizing teams are that employees reduce their dependency on management and increase ownership of the work. \nValues rhythm. A great Scrum Master understands the value of a steady Sprint rhythm and does everything to create and maintain it. The Sprint rhythm should become the team’s heartbeat, which doesn’t cost any energy. Everyone knows the date, time and purpose of every Scrum event. \nKnows the power of silence. A great Scrum Master knows how to truly listen and is comfortable with silence. He/she is aware of the three levels of listening and knows how to use them.\nObserves. A great Scrum Master observes his team with their daily activities. He/she does not have an active role within every session; for example, the daily Scrum is done by the team itself.\nShare experiences. Great Scrum Masters share experiences with peers. This might be within the organisation, but also seminars and conferences are a great way to share experiences and gather knowledge. \nHas a backpack full of different retrospective formats. A great Scrum Master can apply lots of different retrospective formats. This ensures the retrospective will be a fun and useful event for the team. He knows what format is most suitable given the team’s situation.\nCan coach professionally. A great Scrum Master understands the power of professional coaching and has mastered this area of study. Books like Coaching Agile Teams and Co-Active Coaching don’t have any secrets for him/her. He/she knows how to guide without prescribing. \nHas influence at an organizational level. A great Scrum Master knows how to motivate and influence at tactical and strategic levels.  Some of the most difficult impediments a team will face occur at these levels, therefore it’s important a Scrum Master knows how to act at the different levels within an organization.\nPrevent impediments. A great Scrum Master not only resolves impediments, but he also prevents them. \nIsn’t noticed. A great Scrum Master isn’t always actively present. He/she doesn’t disturb the team unnecessary and supports the team in getting into the desired ‘flow’. But when the team needs him/her, he/she is always directly available.\nForms a great duo with the Product Owner. A great Scrum Master has an outstanding partnership with the Product Owner. Although their interest are different, the Product Owner ‘pushes’ the team, the Scrum Master protects the team. \nAllows leadership to thrive. A great Scrum Master allows leadership within the team to thrive and sees this as a success of their coaching style. They believe in the motto “leadership isn’t just a title, it’s an attitude”; it’s an attitude everyone in the team can apply.\nIs familiar with gamification. A great Scrum Master is able to use the concepts of game thinking and game mechanics to engage users in solving problems and increase users’ contribution.\nUnderstands there is more than just Scrum. A great Scrum Master is also competent with XP, Kanban, and Lean. He/she knows the strengths, weaknesses, opportunities, and risks of every method/framework/principle and how & when to use them. \nLeads by example. A great Scrum Master is someone that team members want to follow. He/she does this by inspiring them to unleash their inner potential and showing them the desired behavior\nIs a born facilitator. A great Scrum Master has facilitation as his/her second nature."},{"id":51,"text":"26.\nAs a Scrum Master, how do you ensure that the ‘Transparency, Inspection and Adaptation’ Scrum Pillars are being implemented by the team?\n\nScrum prescribes four formal events for inspection and adaptation, as described in the Scrum Events section of the Scrum Guide; as a Scrum Master you should attend the events and ensure the team is following the ‘Transparency, Inspect and Adapt’ processes: \n\nSprint Planning\nInspect the average Team Velocity over the previous 3 or 4 Sprints, ensure that the velocities have been Transparent to the team and ensure that the team Adapt the Velocity to be used for planning the Sprint\nInspect the Product Backlog (PB) and ensure that it is up to date, that it is Transparent to all stakeholders and that the team Adapts the PBI estimates if necessary\nDaily Scrum\nInspect the Team Board and Adapt the plan for the next day ensuring changes are Transparent to all the team\nInspect the Impediments Board and Adapt plans to resolve impediments if necessary\nSprint Review \nInspect the increment and Adapt the Product Backlog if necessary making sure that any changes are Transparent to all stakeholders\nInspect the Release Plan and Adapt it if necessary making sure that any changes are Transparent to all stakeholders\nSprint Retrospective\nInspect the process that has been followed and make plans to Adapt the process if necessary making sure that any changes are Transparent to all team members"},{"id":52,"text":"27.\nWhat is the ‘frames of reference’ and what are the challenges Scrum Master face during integrating multiple ones?\n\nFrames of reference are everywhere. For example, if you are in the northern hemisphere and you look into the night sky, you will see the visible universe as a collection of stars grouped into constellations.  Now imagine a person in the southern hemisphere looking at the night sky; the person will still see the visible universe as a collection of stars grouped into constellations but they will be a different set; the 2 people have different frames of reference.\n\nIf the person in the southern hemisphere says to the person in the northern hemisphere “I think that there is something happening to the fourth star in the Southern Cross constellation”, the northern hemisphere person may not know what the other is talking about and certainly could not tell if something was happening or not\n\nWe all have our own unique frames of reference for every subject in our heads; they are based on our experiences of childhood, parenting, education, religion, previous interactions with other people etc and even where we are physically located.\n\nIf you live in a country where there are words written in the road to warn you of something, like “SLOW”, if you are in a car, you will see the word SLOW ‘normally’ but if you were in a helicopter above the word you will see it vertically elongated.\n\nIt is the same sign but it is seen differently because of the different frame of reference for the viewers.\n\nSo why is this important to you?  When people are communicating the words and ideas that they express come from their own frame of reference and the potential for miscommunication is high if the frames of reference of the listener are not similar to that of the listener.  Imagine trying to describe a hippopotamus to someone who has never seen one; would you try an analogy with something your listener had seen? Would you try to draw one? Not simple!\n\nAs a Scrum Master/Facilitator you need to be aware of different peoples’ frames of reference when they are communicating so that you can spot possible misunderstandings in listeners.\n\nThe participants in product development workshops will all have their own frames of reference from business and technical and even between people within the same skill set depending on their individual experience.\n\nListen for jargon and abbreviations in conversation and ensure that all listeners know what the speaker is talking about.\n\nThe ‘Groan Zone’\nAfter a period of divergent thinking (see Q – What are ‘divergent’ and ‘convergent’ thinking? ), most groups enter a Groan Zone.\n\nHaving just ‘brainstormed’ a list, the next task, in theory, is simple; sift through the ideas and pick a few to discuss in depth. \n\nIn practice that task can be difficult because everyone has their own frame of reference;  when people misunderstand one another, they become more confused, more impatient and possibly more self-centered; people repeat themselves, they interrupt, they dismiss other people's ideas and rudely put each other down.\n\nWithout a facilitator, at some point, the participants will agree to almost anything, any half-baked, unrealistic, mediocre compromise, just as long as it will get them out of the room.\n\nOne way to help workshop participants gain an understanding of each other's ideas is to encourage them to ask direct questions of one another and listen carefully to the answers. \n\nHowever, there are some challenges to this ‘simple’ approach:\n\nSome participants fear that asking questions might seem confrontational or rude\nMany people cannot cope with the ambiguity of unstructured inquiry and dialogue for very long\nIt is hard for everyone to tolerate the poor behaviors and emotional turmoil that occurs when people feel misunderstood"}]}